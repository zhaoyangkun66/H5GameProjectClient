
{
precision highp float;
uniform CCGlobal {
  mat4 cc_matView;
  mat4 cc_matViewInv;
  mat4 cc_matProj;
  mat4 cc_matProjInv;
  mat4 cc_matViewProj;
  mat4 cc_matViewProjInv;
  vec4 cc_cameraPos;
  vec4 cc_time;
  mediump vec4 cc_screenSize;
  mediump vec4 cc_screenScale;
  };
uniform CCLocal {
  mat4 cc_matWorld;
  mat4 cc_matWorldIT;
  };
in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
  #if USE_TEXTURE
    in vec2 a_uv0;
out vec2 v_uv0;
  #endif
  void main() {
  vec4 pos = vec4(a_position, 1);
    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif
    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
    v_color = a_color;
    gl_Position = pos;
  }
}
{
precision highp float;
  #if USE_ALPHA_TEST
  uniform ALPHA_TEST {
    float alphaThreshold;
  };
  #endif
  void ALPHA_TEST(in vec4 color) {
    #if USE_ALPHA_TEST
    if (color.a < alphaThreshold) discard;
    #endif
  }
  void ALPHA_TEST(in float alpha) {
    #if USE_ALPHA_TEST
    if (alpha < alphaThreshold) discard;
    #endif
  }
in vec4 v_color;
  #if USE_TEXTURE
    in vec2 v_uv0;
uniform sampler2D texture;
  #endif
  void main() {
  vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
  vec4 texture_tmp = texture(texture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_texture
    texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
    #if INPUT_IS_GAMMA
    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);
    o.a *= texture_tmp.a;
    #else
    o *= texture_tmp;
    #endif
    #endif
    o *= v_color;
    ALPHA_TEST(o);
    #if USE_BGRA
    gl_FragColor = o.bgra;
    #else
    gl_FragColor = o.rgba;
    #endif
  }
},
{
precision highp float;
uniform mat4 cc_matViewProj;
uniform mat4 cc_matWorld;
attribute vec3 a_position;
attribute vec4 a_color;
varying vec4 v_color;
  #if USE_TEXTURE
attribute vec2 a_uv0;
varying vec2 v_uv0;
  #endif
  void main() {
  vec4 pos = vec4(a_position, 1);
    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif
    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
    v_color = a_color;
    gl_Position = pos;
  }
}
{
precision highp float;
  #if USE_ALPHA_TEST
  uniform float alphaThreshold;
  #endif
  void ALPHA_TEST(in vec4 color) {
    #if USE_ALPHA_TEST
    if (color.a < alphaThreshold) discard;
    #endif
  }
  void ALPHA_TEST(in float alpha) {
    #if USE_ALPHA_TEST
    if (alpha < alphaThreshold) discard;
    #endif
  }
varying vec4 v_color;
  #if USE_TEXTURE
varying vec2 v_uv0;
uniform sampler2D texture;
  #endif
  void main() {
  vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
  vec4 texture_tmp = texture2D(texture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_texture
    texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
    #if INPUT_IS_GAMMA
    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);
    o.a *= texture_tmp.a;
    #else
    o *= texture_tmp;
    #endif
    #endif
    o *= v_color;
    ALPHA_TEST(o);
    #if USE_BGRA
    gl_FragColor = o.bgra;
    #else
    gl_FragColor = o.rgba;
    #endif
  }
}